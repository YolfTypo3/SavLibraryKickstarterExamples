<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<xliff version="1.0">
	<file source-language="en" datatype="plaintext" original="messages" date="2013-03-06T12:44:12Z" product-name="sav_filter_selectors">
		<header/>
		<body>
			<trans-unit id=".alttitle" xml:space="preserve">
				<source>SAV Filter Selectors</source>
			</trans-unit>
			<trans-unit id=".description" xml:space="preserve">
				<source>This plugin build selectors, checkboxes ... from fields in table. It can be easily used with the &quot;SAV Library Plus&quot; or &quot;SAV Library&quot; extensions.</source>
			</trans-unit>
			<trans-unit id="help.description" xml:space="preserve">
				<source>SAV Filter Selectors Extension</source>
			</trans-unit>
			<trans-unit id="help.image" xml:space="preserve">
				<source>EXT:sav_filter_selectors/Resources/Private/Images/sav_filter_selectors_csh.jpg</source>
			</trans-unit>
			<trans-unit id="help.details" xml:space="preserve">
				<source>. &lt;b&gt;CSS File:&lt;/b&gt;
CSS file to be used in replacement of the default CSS file.

&lt;b&gt;Template:&lt;/b&gt;			
The plugin works with a template you have to enter in the field as follows:
&lt;ul&gt;
 &lt;li&gt; .... &lt;/li&gt;
 &lt;li&gt; .... &lt;/li&gt;
&lt;/ul&gt;

Inside the &lt; li &gt; tags, you can add tags to generate selectors, checkboxes, buttons, search fields, ....

. &lt;b&gt;&lt; label for=&quot;Field&quot; &gt;Title&lt; /label &gt;###select[Table.Field]###&lt;/b&gt;
It generates a selector for the field &quot;Field&quot; from table &quot;Table&quot;. The tag label is associated with the selector.

An alias should be used if the TCA type associated with the field is not &quot;selectorbox&quot;. The alias should be a sql expression. The following example builds a selector for country from a field whose type is &quot;text&quot;.
###select[tx_myext.country as tx_myext.country]###

The tag &quot;selectDistinct&quot; can be used to generate a selector with distinct values. The following example generates a selector box associated with university years :
###selectdistinct[tx_myext.year as 
if(date_end &gt;= unix_timestamp(concat(year(from_unixtime( date_end )),&quot;-10-01&quot;)),
 concat(year(from_unixtime( date_end )),&quot;-&quot;,year(from_unixtime( date_end ))+1),
 concat(year(from_unixtime( date_end))-1,&quot;-&quot;,year(from_unixtime( date_end )))
)]###

An &quot;order by&quot; clause can be added to order the items.

If tags &quot;selectSearchAll&quot; or &quot;selectDistinctSearchAll&quot; are used then the WHERE clause of the query created with the SAV Library Generator is overloaded.

. &lt;b&gt;&lt; label for=&quot;Field&quot; &gt;Title&lt; /label &gt;###selectFromQuery[(query) as Field where ...]###&lt;/b&gt;
It generates a selector from the query. The query should use an alias &quot;label&quot; for the information associated with the selector. An alias &quot;uid&quot; may be also used.
It will provide the value associated with the selected item.
You must add a where clause after the &quot;Field&quot; that will be propagated to extension build with the SAV Library Extension Kickstarter.
If &quot;tag&quot; is an alias, ###tag### are allowed in the where clause and will be replaced by their value.
An order clause may also be used.

. &lt;b&gt;###button[search]###&lt;/b&gt;
It generates a search button.

. &lt;b&gt;&lt; label for=&quot;Name&quot; &gt;Title&lt; /label &gt;###search[Table.Name as Table.Field1, Table.Field2]###&lt;/b&gt;
It generates a search box. Search is done in fields &quot;Field1&quot; or &quot;Field2&quot; of the table &quot;Table&quot;. The tag label is associated with the search box.
If the tag &quot;searchAll&quot; is used then the WHERE clause of the query created with the SAV Library Generator is overloaded.

. &lt;b&gt;###calendar[Table as Table.FieldTitle order by Table.FieldDate]###&lt;/b&gt;
It generates a mini calendar from the table &quot;Table&quot; using the field &quot;FieldDate&quot;. The field &quot;FieldTitle&quot; is used to display the message associated with each item.

. &lt;b&gt;###check[Table.Field]###&lt;/b&gt;
It generates checkboxes for the field &quot;Field&quot; of the table &quot;Table&quot;.
Sometimes, it may be useful to have several fields with checkboxes. By default, fields are &quot;ANDed&quot; in the WHERE Clause. If you want to have the fields &quot;ORed&quot; you have to use
###checkBeginGroup[Table.firstField]### for the first field and ###checkEndGroup[Table.lastField]### for the last field. If you have intermediate fields, just use ###check[Table.Field]###.

. &lt;b&gt;###radiolist[string as WHERE_CLAUSE]###&lt;/b&gt;
It generates a &quot;radio button&quot;. If it is selected, the WHERE_CLAUSE will be added.

. &lt;b&gt;###where[WHERE_CLAUSE]###&lt;/b&gt;
The WHERE_CLAUSE will be added. No output is generated. 

&lt;b&gt;Language:&lt;/b&gt;
The language section can be used to define local translation of keywords associated with the selectors, checkboxes, .... Language metatags must be defined in the template as follows:
$$$label1$$$ where label1 is the a keyword to be defined in this section (see the default configuration).

&lt;b&gt;Storage page list:&lt;/b&gt;
List of the pages where information are searched. By default the page where the plugin is inserted is taken into account.</source>
			</trans-unit>
		</body>
	</file>
</xliff>